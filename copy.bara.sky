"""Project go/copybara configuration.

** To push changes to github:

```
copybara --squash third_party/py/swirl_c/copy.bara.sky \
  postsubmit_piper_to_github
```

** To export from a workspace to a local folder (useful for testing):

```
copybara third_party/py/swirl_c/copy.bara.sky g3_to_folder .. \
  --folder-dir /tmp/swirl_c_copybara/$(date +'%Y%m%d_%H%M')
```

** To review and accept pull requests (PR):

1) Do the code review on GitHub. There is no way to sync comments on Critique
   to GitHub. (https://yaqs.corp.google.com/eng/q/6352489806954496)

2) When the PR is ready to be pulled, add label "pull ready" to it in GitHub.

3) Run the `postsubmit_piper_to_github` command to push latest changes in piper
   to GitHub.

4) Run:

   copybara third_party/py/swirl_c/copy.bara.sky github_pr_to_piper <PR>

   where <PR> is the PR number on GitHub.

5) Review internally as usual in Critique.

6) If more changes are necessary, comment on the PR request in GitHub. When
   PR is ready again, go back to step 3. Copybara will update the previous
   CL with the new changes.

7) Submit.

8) Push changes to github. Copybara should automatically close the PR request.

IMPORTANT: Do not merge PRs in GitHub manually. Manul merges will require manual
fixes:

https://g3doc.corp.google.com/devtools/copybara/g3doc/userdoc/troubleshoot.md?cl=head#accidental_merge
"""

load(
    "//devtools/copybara/library/workflow",
    "import_pr_config",
)
load(
    "//third_party/py/etils/copybara_utils",
    "common_transforms",
    "g3_to_folder",
    "google3_glob",
    "make_project_info",
    "piper_sot_to_github",
)

# ================= CONSTANTS =================

# Project info
# See http://google3/third_party/py/etils/copybara_utils.bara.sky for available
# configurations
info = make_project_info(
    module_name = "swirl_c",
    g3_root = "google3/third_party/py/swirl_c/",
    github_repo = "google-research/swirl-c.git",
    github_branch = "main",
    contact_email = "sim-research-core+copybara@google.com",
    owner_mdb = "sim-research",
)

# Files to include
g3_files = google3_glob(
    info.g3_root,
    # Additional files to excludes.
    # Common internal files (`BUILD`, `**/google/**`...) are automatically excluded.
    google3_exclude = [
        "google3/third_party/py/swirl_c/.git/*",
        "**/**_test.py",
    ],
    # Additional files to include, applied after the `google3_exclude`.
    # By default, `g3doc/` is excluded. To include it, add `"g3doc/**"`
    # google3_include = ["g3doc/**"],
)

# ================= TRANSFORMATIONS =================

# Transformations, applied in both g3->git (cl->PR) and git->g3
_G3_TO_GIT_TRANSFORMATIONS = [
    # Apply the common transformations:
    # * Move the implementation `/**` -> `/<module_name>/**` subdir
    #   top level files can be customized in `make_project_info` like:
    #   `make_project_info(top_level_files=common_top_level_files() + ["my_file.txt"])`
    # * Add apache headers
    # * Scrub internal code (in `.py` and `.md`)
    # * Rename `http://google3` <> `https://github.com` urls
    common_transforms(info),
    core.replace(
        before = "JellyFish",
        after = "TPUv2",
    ),
    core.replace(
        before = "DragonFish",
        after = "TPUv3",
    ),
    core.replace(
        before = "PufferFish",
        after = "TPUv4",
    ),
    core.replace(
        before = "borg",
        after = "Google internal",
    ),
    core.transform(
        [
            core.replace(
                before = "google3/third_party/py/",
                after = "",
            ),
        ],
        reversal = [],
    ),
    core.transform(
        [
            core.replace(
                before = "third_party/py/",
                after = "",
            ),
        ],
        reversal = [],
    ),
    core.transform(
        [
            core.replace(
                before = "${x}",
                after = "",
                multiline = True,
                regex_groups = {
                    "x": "(?m)^.*BEGIN:? GOOGLE[_-]INTERNAL[\\w\\W]*?END:? GOOGLE[_-]INTERNAL.*$\\n",
                },
            ),
        ],
        reversal = [],
    ),
]

# ================= WORKFLOWS =================

# Default workflow (cl -> PR export)
piper_sot_to_github(
    project_info = info,
    google3_files = g3_files,
    transformations = _G3_TO_GIT_TRANSFORMATIONS,
    github_actions = [
        "pytest-job",
    ],
    import_pr_config = import_pr_config(
        required_labels = ["pull ready"],
        safe_reviewers = [
            "bcg",
            "wqing",
            "yifanchen",
            "${GITHUB_PR_ASSIGNEE_GOOGLER}",
        ],
        safe_cc = [
            "bcg",
            "wqing",
            "yifanchen",
            "${GITHUB_PR_REVIEWER_APPROVER_GOOGLER}",
        ],
        piper_reviewers = [
            "bcg",
            "wqing",
            "yifanchen",
        ],
        review_cc = [
            "tf-sim-dev+reviews",
            "${GITHUB_PR_REVIEWER_APPROVER_GOOGLER}",
            "${GITHUB_PR_ASSIGNEE_GOOGLER}",
        ],
    ),
)

# Workflow to export to folder
g3_to_folder(
    project_info = info,
    origin_files = g3_files,
    transformations = _G3_TO_GIT_TRANSFORMATIONS,
)
